class,CLASS
WhatHappen,IDENTIFIER
{,LBRACE
public,PUBLIC
static,STATIC
void,VOID
main,MAIN
(,LPAREN
String,STRING
[,LBRACKET
],RBRACKET
args,IDENTIFIER
),RPAREN
{,LBRACE
mc,IDENTIFIER
=,EQUAL
new,NEW
MyClient,IDENTIFIER
(,LPAREN
),RPAREN
;,SEMICOLON
},RBRACE
},RBRACE
class,CLASS
Client,IDENTIFIER
{,LBRACE
int,INT
in,IDENTIFIER
;,SEMICOLON
int,INT
out,IDENTIFIER
;,SEMICOLON
int,INT
[,LBRACKET
],RBRACKET
messagelist,IDENTIFIER
;,SEMICOLON
int,INT
index,IDENTIFIER
;,SEMICOLON
public,PUBLIC
boolean,BOOLEAN
init,IDENTIFIER
(,LPAREN
),RPAREN
{,LBRACE
index,IDENTIFIER
=,EQUAL
0,INTEGERLITERAL
;,SEMICOLON
messagelist,IDENTIFIER
=,EQUAL
new,NEW
int,INT
[,LBRACKET
10,INTEGERLITERAL
],RBRACKET
;,SEMICOLON
in,IDENTIFIER
=,EQUAL
0,INTEGERLITERAL
;,SEMICOLON
out,IDENTIFIER
=,EQUAL
0,INTEGERLITERAL
;,SEMICOLON
return,RETURN
true,TRUE
;,SEMICOLON
},RBRACE
public,PUBLIC
int,INT
run,IDENTIFIER
(,LPAREN
int,INT
host,IDENTIFIER
,,COMMA
int,INT
port,IDENTIFIER
),RPAREN
{,LBRACE
int,INT
handle,IDENTIFIER
;,SEMICOLON
handle,IDENTIFIER
=,EQUAL
this,THIS
.,FULLSTOP
Juggling,IDENTIFIER
(,LPAREN
),RPAREN
;,SEMICOLON
return,RETURN
handle,IDENTIFIER
;,SEMICOLON
},RBRACE
public,PUBLIC
int,INT
getMsg,IDENTIFIER
(,LPAREN
),RPAREN
{,LBRACE
int,INT
tmp,IDENTIFIER
;,SEMICOLON
tmp,IDENTIFIER
=,EQUAL
messagelist,IDENTIFIER
.,FULLSTOP
length,LENGTH
;,SEMICOLON
if,IF
(,LPAREN
this,THIS
.,FULLSTOP
isVoid,IDENTIFIER
(,LPAREN
),RPAREN
),RPAREN
{,LBRACE
tmp,IDENTIFIER
=,EQUAL
tmp,IDENTIFIER
-,HYPHEN
1,INTEGERLITERAL
;,SEMICOLON
},RBRACE
else,ELSE
{,LBRACE
tmp,IDENTIFIER
=,EQUAL
tmp,IDENTIFIER
*,MULTIPLY
2,INTEGERLITERAL
;,SEMICOLON
},RBRACE
if,IF
(,LPAREN
index,IDENTIFIER
<,LESSTHEN
10,INTEGERLITERAL
),RPAREN
{,LBRACE
messagelist,IDENTIFIER
[,LBRACKET
index,IDENTIFIER
],RBRACKET
=,EQUAL
tmp,IDENTIFIER
;,SEMICOLON
index,IDENTIFIER
=,EQUAL
index,IDENTIFIER
+,PLUS
1,INTEGERLITERAL
;,SEMICOLON
},RBRACE
else,ELSE
{,LBRACE
index,IDENTIFIER
=,EQUAL
0,INTEGERLITERAL
;,SEMICOLON
},RBRACE
return,RETURN
tmp,IDENTIFIER
;,SEMICOLON
},RBRACE
public,PUBLIC
boolean,BOOLEAN
isVoid,IDENTIFIER
(,LPAREN
),RPAREN
{,LBRACE
boolean,BOOLEAN
flag,IDENTIFIER
;,SEMICOLON
if,IF
(,LPAREN
0,INTEGERLITERAL
<,LESSTHEN
messagelist,IDENTIFIER
.,FULLSTOP
length,LENGTH
),RPAREN
{,LBRACE
flag,IDENTIFIER
=,EQUAL
false,FALSE
;,SEMICOLON
},RBRACE
else,ELSE
{,LBRACE
flag,IDENTIFIER
=,EQUAL
true,TRUE
;,SEMICOLON
},RBRACE
return,RETURN
flag,IDENTIFIER
;,SEMICOLON
},RBRACE
public,PUBLIC
int,INT
Juggling,IDENTIFIER
(,LPAREN
),RPAREN
{,LBRACE
boolean,BOOLEAN
t,IDENTIFIER
;,SEMICOLON
int,INT
tmp1,IDENTIFIER
;,SEMICOLON
int,INT
tmp2,IDENTIFIER
;,SEMICOLON
int,INT
tmp3,IDENTIFIER
;,SEMICOLON
tmp1,IDENTIFIER
=,EQUAL
2,INTEGERLITERAL
;,SEMICOLON
tmp2,IDENTIFIER
=,EQUAL
3,INTEGERLITERAL
;,SEMICOLON
tmp3,IDENTIFIER
=,EQUAL
4,INTEGERLITERAL
;,SEMICOLON
while,WHILE
(,LPAREN
(,LPAREN
tmp2,IDENTIFIER
<,LESSTHEN
tmp3,IDENTIFIER
),RPAREN
&&,DOUBLEAND
(,LPAREN
tmp1,IDENTIFIER
<,LESSTHEN
tmp2,IDENTIFIER
),RPAREN
),RPAREN
{,LBRACE
tmp1,IDENTIFIER
=,EQUAL
tmp3,IDENTIFIER
-,HYPHEN
tmp2,IDENTIFIER
;,SEMICOLON
tmp2,IDENTIFIER
=,EQUAL
tmp2,IDENTIFIER
-,HYPHEN
tmp1,IDENTIFIER
;,SEMICOLON
tmp3,IDENTIFIER
=,EQUAL
tmp2,IDENTIFIER
*,MULTIPLY
tmp1,IDENTIFIER
;,SEMICOLON
t,IDENTIFIER
=,EQUAL
this,THIS
.,FULLSTOP
HolyLight,IDENTIFIER
(,LPAREN
),RPAREN
;,SEMICOLON
},RBRACE
return,RETURN
(,LPAREN
tmp1,IDENTIFIER
*,MULTIPLY
tmp2,IDENTIFIER
+,PLUS
tmp3,IDENTIFIER
),RPAREN
*,MULTIPLY
messagelist,IDENTIFIER
.,FULLSTOP
length,LENGTH
;,SEMICOLON
},RBRACE
public,PUBLIC
boolean,BOOLEAN
HolyLight,IDENTIFIER
(,LPAREN
),RPAREN
{,LBRACE
in,IDENTIFIER
=,EQUAL
in,IDENTIFIER
+,PLUS
1,INTEGERLITERAL
;,SEMICOLON
out,IDENTIFIER
=,EQUAL
out,IDENTIFIER
-,HYPHEN
1,INTEGERLITERAL
;,SEMICOLON
System.out.println,SYSTEMOUTPRINTLN
(,LPAREN
false,FALSE
),RPAREN
;,SEMICOLON
return,RETURN
false,FALSE
;,SEMICOLON
},RBRACE
},RBRACE
class,CLASS
MyClient,IDENTIFIER
extends,EXTENDS
Client,IDENTIFIER
{,LBRACE
public,PUBLIC
int,INT
start,IDENTIFIER
(,LPAREN
int,INT
host,IDENTIFIER
,,COMMA
int,INT
port,IDENTIFIER
),RPAREN
{,LBRACE
int,INT
handle,IDENTIFIER
;,SEMICOLON
handle,IDENTIFIER
=,EQUAL
this,THIS
.,FULLSTOP
run,IDENTIFIER
(,LPAREN
),RPAREN
;,SEMICOLON
return,RETURN
handle,IDENTIFIER
;,SEMICOLON
},RBRACE
},RBRACE
end,EOF
